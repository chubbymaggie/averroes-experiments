#! /usr/bin/env bash

set -e

benchmark=$1
base=$2
jre=$3

# declaring some arrays of options
declare -A appregex
appregex["antlr"]='dacapo.antlr.*:antlr.**'
appregex["bloat"]='dacapo.bloat.*:EDU.purdue.cs.bloat.**'
appregex["chart"]='dacapo.chart.*:org.jfree.chart.**:org.jfree.data.**'
appregex["hsqldb"]='dacapo.hsqldb.*:org.hsqldb.**'
appregex["luindex"]='dacapo.luindex.*:org.apache.lucene.**'
appregex["lusearch"]='dacapo.lusearch.*:org.apache.lucene.**'
appregex["pmd"]='dacapo.pmd.*:net.sourceforge.pmd.**'
appregex["xalan"]='dacapo.xalan.*:org.apache.xalan.**:org.apache.xml.dtm.**:org.apache.xml.utils.**:org.apache.xpath.**:org.w3c.dom.xpath.*'
appregex["compress"]='spec.benchmarks._201_compress.*'
appregex["db"]='spec.benchmarks._209_db.*'
appregex["jack"]='spec.benchmarks._228_jack.*'
appregex["javac"]='spec.benchmarks._213_javac.*'
appregex["jess"]='spec.benchmarks._202_jess.**'
appregex["raytrace"]='spec.benchmarks._205_raytrace.*'

declare -A mainclass
mainclass["antlr"]='dacapo.antlr.Main2'
mainclass["bloat"]='dacapo.bloat.Main2'
mainclass["chart"]='dacapo.chart.Main2'
mainclass["hsqldb"]='org.hsqldb.hsqldbDoopDriver'
mainclass["luindex"]='dacapo.luindex.Main2'
mainclass["lusearch"]='dacapo.lusearch.Main2'
mainclass["pmd"]='dacapo.pmd.Main2'
mainclass["xalan"]='dacapo.xalan.Main2'
mainclass["compress"]='spec.benchmarks._201_compress.Main'
mainclass["db"]='spec.benchmarks._209_db.Main'
mainclass["jack"]='spec.benchmarks._228_jack.Main'
mainclass["javac"]='spec.benchmarks._213_javac.Main'
mainclass["jess"]='spec.benchmarks._202_jess.Main'
mainclass["raytrace"]='spec.benchmarks._205_raytrace.Main'


# some useful variables and options
program=$(basename ${benchmark})
bench=$(dirname ${benchmark})

# -a -l -d -t
if [ "${bench}" == "dacapo" ]; then
	app=benchmarks/dacapo/${program}.jar
	lib=benchmarks/dacapo/${program}-deps.jar
elif [ "${bench}" == "specjvm" ]; then
	app=benchmarks/specjvm/${program}.zip
	lib=benchmarks/specjvm/spec.zip:benchmarks/specjvm/sunrsasign.jar
fi

# -d 
dyn=benchmarks/${bench}/${program}.dyn

# -t
tfx=benchmarks/${bench}/${program}.tfx

# -j
if [ "${jre}" == "1.4" ]; then
	jre=jre/1.4.2_11
elif [ "${jre}" == "1.6" ]; then
	jre=jre/1.6.0_45
elif [ "${jre}" == "1.7" ]; then
	jre=jre/1.7.0_80
elif [ "${jre}" == "1.8" ]; then
	jre=jre/1.8.0_60
fi

# -o
outputdir=${base}/benchmarks-averroes/${benchmark}

echo "running averroes on ${benchmark} ..."

# 1. create output directory
mkdir -p ${outputdir}
  
# 2. run Averroes
java -jar averroes.jar -r ${appregex[${program}]} -m ${mainclass[${program}]} -a ${app} -l ${lib} -d ${dyn} -t ${tfx} -o ${outputdir} -j ${jre}

# 3. output some stats about JAR files
# original app size
app_size=$(unzip -l ${outputdir}/organized-app.jar | tail -n 1 | awk '{print $1;}')
echo "Original application size is ${app_size} bytes."

# original lib size
lib_size=$(unzip -l ${outputdir}/organized-lib.jar | tail -n 1 | awk '{print $1;}')
echo "Original library size is ${lib_size} bytes."

# placeholder lib size
place_lib_size=$(unzip -l ${outputdir}/placeholder-lib.jar | tail -n 1 | awk '{print $1;}')
echo "Placeholder library size is ${place_lib_size} bytes."

# 4. output some stats about methods
orig_lib_methods=$(javap -p -bootclasspath ${outputdir}/organized-lib.jar $(jar -tf ${outputdir}/organized-lib.jar | grep "class$" | sed s/\.class$//) | grep '(\|static {' | wc -l)
echo "Number of original library methods is ${orig_lib_methods}."

place_lib_methods=$(javap -p -bootclasspath ${outputdir}/placeholder-lib.jar $(jar -tf ${outputdir}/placeholder-lib.jar | grep "class$" | sed s/\.class$//) | grep '(\|static {' | wc -l)
echo "Number of placeholder library methods is ${place_lib_methods}."
  

echo ""